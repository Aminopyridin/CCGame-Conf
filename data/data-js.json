[
  {
    "name": "hello",
    "instruction": "Найди и исправь все стилевые ошибки в коде. Кликай мышкой по ошибкам.\nКаждая найденная ошибка приносит баллы",
    "learning": true,
    "code": "function hello() {\n\tconst {{veryBadVariableName_clickIt}} = prompt('Enter your name: ');\n\talert('Hello, ' + {{veryBadVariableName_clickIt}});\n}",
    "bugs": {
      "veryBadVariableName_clickIt": {
        "type": "naming",
        "replace": "name",
        "description": "Длинное и ужасное имя переменной!"
      }
    }
  },
  {
    "name": "GetThem",
    "instruction": "Качественно выбранные имена — то что делает ваш код понятнее!",
    "learning": true,
    "code": "function {{getThem}}({{theBigList}}) {\n\tconst {{list1}} = []\n\n\t{{theBigList}}.forEach(function(cell, index) {\n\t\tif (!cell) {\n\t\t\t{{list1}}.push(index)\n\t\t}\n\t})\n\treturn {{list1}}\n}",
    "bugs": {
      "getThem": {
        "type": "naming",
        "replace": "getEmptyPositions",
        "description": "Не используйте местоимения в именах. Это совсем не добавляет понятности."
      },
      "list1": {
        "type": "naming",
        "replace": "emptyPositions",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      },
      "theBigList": {
        "type": "naming",
        "replace": "allCells",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      }
    }
  },
  {
    "name": "ViewsPerSecond",
    "instruction": "А что ещё, кроме качественных имен может сделать код понятнее?",
    "learning": true,
    "code": "function getViewsPerSecond(views, {{t}}) {\n\tvar {{n}} = {{86400}};\n\tvar viewsCount = views.filter(function(v) {\n\t\treturn v.date === {{t}};\n\t}).length;\n\treturn viewsCount / {{n}};\n}",
    "bugs": {
      "86400": {
        "type": "other",
        "replace": "24 * 60 * 60",
        "description": "Иногда, арифметические выражения понятнее, чем значение этого выражения.\nЗапись 24 * 60 * 60 проще проверить на корректность, чем 86400."
      },
      "t": {
        "type": "naming",
        "replace": "date",
        "description": "Имя переменной должно отражать семантику. \nСтарайтесь избегать однобуквенных имен. Общее правило: чем больше область видимости — тем подробнее должно быть имя."
      },
      "n": {
        "type": "naming",
        "replace": "secondsInDay",
        "description": "Имя переменной должно отражать семантику. \nСтарайтесь избегать однобуквенных имен. Общее правило: чем больше область видимости — тем подробнее должно быть имя."
      }
    }
  },
  {
    "name": "rstr",
    "instruction": "Осторожнее — начиная с этого уровня, за каждый неверный клик и каждую подсказку вы будете терять баллы!",
    "code": "var {{rstr}} = prompt('');\nvar {{flag}} = false;\nfor (var charIndex = 0; charIndex < {{rstr}}.length; charIndex++) {\n\tif ({{flag}} || {{rstr}}[charIndex] !== '\\\\') {\n\t\tconsole.log({{rstr}}[charIndex]);\n\t}\n\t{{flag}} = {{rstr}}[charIndex] === '\\\\'\n}",
    "bugs": {
      "rstr": {
        "replace": "line",
        "type": "naming",
        "description": "Избегайте труднпрзнсимых имен и кодирования, понятного лишь вам."
      },
      "flag": {
        "replace": "escaped",
        "type": "naming",
        "description": "Не называйте булевы переменные flag, f и подобными именами.\nУ каждого \"флага\" есть смысл, который и нужно отразить в имени."
      }
    }
  },
  {
    "name": "bigrams",
    "instruction": "Придерживайтесь общепринятого стиля именования для текущего языка программирования.",
    "code": "function getBigrams(words) {\n\tvar {{colBigrams}} = words.length - 1;\n\tvar {{bigrams_list}} = [];\n\tfor (var {{I}} = 0; {{I}} < {{colBigrams}}; {{I}}++) {\n\t\t{{bigrams_list}}[{{I}}] = words[{{I}}] + ' ' + words[{{I}} + 1];\n\t}\n\treturn {{bigrams_list}};\n}",
    "bugs": {
      "I": {
        "replace": "i",
        "type": "naming",
        "description": "В JS имена локальных переменных принято начинать с маленькой буквы.\nНарушение таких, казалось бы, несущественных правил часто сильно раздражает опытных программистов."
      },
      "colBigrams": {
        "replace": "bigramsCount",
        "type": "naming",
        "description": "Не используйте русские слова в именах (если только вы не программируете на 1C).\nЧитая код, программисты ожидают видеть английские имена, \nпоэтому написанные транслитом русские слова могут быть восприняты неправильно.\nНапример, в данном случае col (количество) легко спутать с сокращением от слова column."
      },
      "bigrams_list": {
        "type": "naming",
        "replace": "bigrams",
        "description": "В JS для составных имен принято использовать стиль CamelCase, и не использовать snake_case."
      }
    }
  },
  {
    "name": "manager",
    "instruction": "Продолжаем охоту на слова без смысла.",
    "code": "function {{dataManager}}() {\n\tconst filePath = path.resolve(settings.defaultDirectory, 'tasks.json');\n\tconst fileRowText = fs.readFileSync(filePath);\n\tconst tasks = JSON.parse(fileRowText);\n\treturn tasks;\n}",
    "bugs": {
      "dataManager": {
        "type": "naming",
        "replace": "getTasks",
        "description": "Manager — слово заместитель, не добавляющее смысла, как и слово data. Часто их можно заменить на что-то более осмысленное."
      }
    }
  },
  {
    "name": "CopyChars",
    "instruction": "Проблемы с именами в этом коде очевидны. Но тут есть кое-что еще!",
    "code": "function copyChars({{array1}}, {{array2}}) {\n\t{{//copy arrays item by item.}}\n\tfor(var i = 0; i < {{array1}}.length; i++) {\n\t\t{{array2}}[i] = {{array1}}[i];\n\t}\n}",
    "bugs": {
      "array1": {
        "replace": "source",
        "type": "naming",
        "description": "Имена с номерами на конце — это антипаттерн.\nВместо добавления номеров старайтесь отразить в именах суть различия."
      },
      "array2": {
        "replace": "destination",
        "type": "naming",
        "description": "Функцию с непонятными именами аргументов неудобно использовать."
      },
      "//copy": {
        "replace": "",
        "type": "comments",
        "description": "Нет смысла писать комментарии, повторяющие код."
      }
    }
  },
  {
    "name": "Chessboard",
    "instruction": "Время закрепить все полученные на предыдущих уровнях знания!",
    "code": "const {{colorCell}} = {\n\tblack: 'black',\n\twhite: 'white',\n}\n\nclass Chessboard {\n\tconstructor({{n}}) {\n\t\tthis.{{m_brdSz}} = {{n}};\n\t\tthis.{{array}} = [];\n\t\t{{//Fill board with black and white colors}}\n\t\tfor(var {{a}} = 0; {{a}} < this.{{m_brdSz}}; {{a}}++) {\n\t\t\tfor(var {{b}} = 0; {{b}} < this.{{m_brdSz}}; {{b}}++) {\n\t\t\t\tconst isBlack = ({{a}} + {{b}}) % 2 === 0;\n\t\t\t\tthis.{{array}}[{{a}}][{{b}}] = isBlack ? {{colorCell}}.black : {{colorCell}}.white\n\t\t\t}\n\t\t}\n\t}\n}",
    "bugs": {
      "//Fill": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии повторяющие код не имеют смысла."
      },
      "colorCell": {
        "type": "naming",
        "replace": "cellColor",
        "description": "Нарушение правильного для английского языка порядка слов в составных именах — частая ошибка программистов \nсо слабым знанием английского.\ncolorCell — это цветная клетка, а цвет клетки — cellColor.\nНе путайте — не вводите в замешательство читающих."
      },
      "n": {
        "type": "naming",
        "replace": "size",
        "description": "В данном контексте, n может обозначать как размер шахматной доски, так и количество фигур на доске или номер доски.\nИмя size устранит эту неоднозначность."
      },
      "m_brdSz": {
        "type": "naming",
        "replace": "size",
        "description": "Не используйте закодированные или труднопроизносимые имена. Вам их придется произносить или хотя бы мысленно проговаривать!"
      },
      "array": {
        "type": "naming",
        "replace": "cellColors",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      },
      "a": {
        "type": "naming",
        "replace": "y",
        "description": "Для обозначения координат вместо i, j и a, b лучше использовать предсказуемые и понятные x, y. "
      },
      "b": {
        "type": "naming",
        "replace": "x",
        "description": "Избегайте необходимости мысленного декодирования при чтении кода."
      }
    }
  },
  {
    "name": "SplitMethod",
    "instruction": "Имена переменных и методов тут в порядке. Но не только это делает код хорошим!",
    "code": "function copyFile(filePath, outputPath) {\n\tconst inputLines = fs.readFileSync(filePath).split('\\n');\n\tif (fs.existsSync(outputPath)) {\n\t\toutputPath = path.resolve(outputPath, path.basename(filePath));\n\t}\n\t{{//Convert file}}\n\tconst escapedLines = inputLines.map(i => i.replace('\"', '\\\"'));\n\tconst outputText = escapedLines.join('\\n');\n\tfs.writeFileSync(outputPath, outputText);\n\tconsole.log(`${outputText.length} characters`);\n}",
    "bugs": {
      "//Convert": {
        "type": "methods",
        "replace": "convertFile(inputLines, outputPath);\n}\n\nfunction convertFile(inputLines, outputPath) {",
        "description": "Вместо комментария, разделяющего код на две фазы, стоит сделать настоящее разделение кода на методы.\nКаждый метод должен делать ровно одну вещь. Если вы можете естественным образом разбить одну функцию на две — сделайте это!\n"
      }
    }
  },
  {
    "name": "CommentExplainCode",
    "instruction": "Крохотные методы в одну-две строки часто могут значительно повысить читаемость кода.",
    "code": "{{//If employee deserves full benefits}}\nif ({{employee.isHourly() && employee.age > 65 || employee.hasSpecialReward()}}){\n\tpay(employee, fullBenefitsAmount); {{//Pay largeAmount}}\n} else {\n\tpay(employee, reducedAmount);\n}",
    "bugs":  {
      "//Pay": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии повторяющие код не нужны. Они легко могут устареть!"
      },
      "employee.isHourly()": {
        "type": "methods",
        "replace": "employee.deservesFullBenefits()",
        "description": "Сложные булевы выражения стоит выделять в методы или вспомогательные переменные, давая им говорящие названия. Это улучшит читаемость."
      },
      "//If": {
        "type": "comments",
        "replace": "",
        "description": "Вместо поясняющего комментария лучше изменить код так, чтобы в комментарии не было нужды."
      }
    }
  },
  {
    "name": "endComments",
    "instruction": "Как вы уже поняли, далеко не все комментарии полезны!",
    "code": "try {\n\tlet linesCount = 0;\n\tlet charsCount = 0;\n\tfor (const line of lines) {\n\t\tlinesCount++;\n\t\tcharsCount += line.length;\n\t} {{//for}}\n} {{//try}}\ncatch (e) {\n\tconsole.error(`Error: ${e.message}`);\n} {{//catch}}",
    "bugs": {
      "//for": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии вида 'конец цикла', 'конец функции' и подобные бессмысленны. "
      },
      "//try": {
        "type": "comments",
        "replace": "",
        "description": "Для коротких функций такие комментарии не нужны, а длинные функции лучше разбить на несколько более коротких."
      },
      "//catch": {
        "type": "comments",
        "replace": "",
        "description": "Современные среды разработки и программистские редакторы умеют подсвечивать парные скобки. Это надежнее таких комментариев."
      }
    }
  },
  {
    "name": "collision",
    "instruction": "Время закрепить освоенные знания!",
    "code": "{{/** \n * Обрабатывает столкновение героя с врагом\n */}}\nfunction collisionHandler(hero, enemy) {\n\t{{//If hero and enemy collided\n\tif ((hero.x - enemy.x)*(hero.x - enemy.x) + (hero.y - enemy.y)*(hero.y - enemy.y)\n\t    < (hero.radius + enemy.radius)*(hero.radius + enemy.radius)}}) {\n\t\thero.life--;\n\t\tif (!hero.isAlive) {{//нужно оповестить подписчиков}}\n\t\t\tonHeroDeath(hero);\n\t}\n}",
    "bugs": {
      "/**": {
        "type": "comments",
        "replace": "",
        "description": "JSDoc-комментарии бессмысленны, если не несут новую информацию."
      },
      "//If": {
        "type": "comments",
        "replace": "if (collided(hero, enemy))",
        "description": "Не используйте комментарии там, где можно выделить метод с говорящим именем."
      },
      "//нужно": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии дословно повторяющие код бессмысленны."
      }
    }
  }
]