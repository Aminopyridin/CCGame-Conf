[
  {
    "name": "hello",
    "instruction": "Найди и исправь все стилевые ошибки в коде. Кликай мышкой по ошибкам.\nКаждая найденная ошибка приносит баллы",
    "learning": true,
    "code": "void Main()\n{\n\tConsole.WriteLine(\"Enter your name: \");\n\tvar {{veryBadVariableName_clickIt}} = Console.ReadLine();\n\tConsole.WriteLine(\"Hello, \" + {{veryBadVariableName_clickIt}});\n}",
    "bugs": {
      "veryBadVariableName_clickIt": {
        "type": "naming",
        "replace": "name",
        "description": "Длинное и ужасное имя переменной!"
      }
    }
  },
  {
    "name": "GetThem",
    "instruction": "Качественно выбранные имена — то что делает ваш код понятнее!",
    "learning": true,
    "code": "List<Position> {{GetThem}}(List<Cell> {{theBigList}})\n{\n\tvar {{list1}} = new List<Position>();\n\tforeach (var cell in {{theBigList}})\n\t{\n\t\tif (cell.IsEmpty) \n\t\t\t{{list1}}.Add(cell.Position);\n\t}\n\treturn {{list1}};\n}",
    "bugs": {
      "GetThem": {
        "type": "naming",
        "replace": "GetEmptyPositions",
        "description": "Не используйте местоимения в именах. Это совсем не добавляет понятности."
      },
      "list1": {
        "type": "naming",
        "replace": "emptyPositions",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      },
      "theBigList": {
        "type": "naming",
        "replace": "allCells",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      }
    }
  },
  {
    "name": "ViewsPerSecond",
    "instruction": "А что ещё, кроме качественных имен может сделать код понятнее?",
    "learning": true,
    "code": "double GetViewsPerSecond(IEnumerable<PageView> views, DateTime {{t}})\n{\n\tvar {{n}} = {{86400}};\n\tvar viewsCount = views.Count(v => v.Timestamp.Date == {{t}});\n\treturn (double)viewsCount / {{n}};\n}",
    "bugs": {
      "86400": {
        "type": "other",
        "replace": "24 * 60 * 60",
        "description": "Иногда, арифметические выражения понятнее, чем значение этого выражения.\nЗапись 24 * 60 * 60 проще проверить на корректность, чем 86400."
      },
      "t": {
        "type": "naming",
        "replace": "date",
        "description": "В именах стоит отражать существенные особенности. \nНапример, если переменная типа DateTime хранит только дату, можно назвать ее date."
      },
      "n": {
        "type": "naming",
        "replace": "secondsInDay",
        "description": "Имя переменной должно отражать семантику. \nСтарайтесь избегать однобуквенных имен. Общее правило: чем больше область видимости — тем подробнее должно быть имя."
      }
    }
  },
  {
    "name": "rstr",
    "instruction": "Осторожнее — начиная с этого уровня, за каждый неверный клик и каждую подсказку вы будете терять баллы!",
    "code": "var {{rstr}} = Console.ReadLine();\nvar {{flag}} = false;\nfor(var charIndex = 0; charIndex < {{rstr}}.Length; charIndex++)\n{\n\tif ({{flag}} || {{rstr}}[charIndex] != '\\\\')\n\t\tConsole.Write({{rstr}}[charIndex]);\n\t{{flag}} = {{rstr}}[charIndex] == '\\\\';\n}",
    "bugs": {
      "rstr": {
        "replace": "line",
        "type": "naming",
        "description": "Избегайте труднпрзнсимых имен и кодирования, понятного лишь вам."
      },
      "flag": {
        "replace": "escaped",
        "type": "naming",
        "description": "Не называйте булевы переменные flag, f и подобными именами.\nУ каждого \"флага\" есть смысл, который и нужно отразить в имени."
      }
    }
  },
  {
    "name": "bigrams",
    "instruction": "Придерживайтесь общепринятого стиля именования для текущего языка программирования.",
    "code": "List<string> GetBigrams(IList<string> words)\n{\n\tvar {{colBigrams}} = words.Count - 1;\n\tvar {{bigrams_list}} = new string[{{colBigrams}}];\n\tfor (var {{I}} = 0; {{I}} < {{colBigrams}}; {{I}}++)\n\t\t{{bigrams_list}}[{{I}}] = words[{{I}}] + \" \" + words[{{I}} + 1];\n\treturn {{bigrams_list}}.Distinct().ToList();\n}",
    "bugs": {
      "I": {
        "replace": "i",
        "type": "naming",
        "description": "В C# имена локальных переменных принято начинать с маленькой буквы.\nНарушение таких, казалось бы, несущественных правил часто сильно раздражает опытных программистов."
      },
      "colBigrams": {
        "replace": "bigramsCount",
        "type": "naming",
        "description": "Не используйте русские слова в именах (если только вы не программируете на 1C).\nЧитая код, программисты ожидают видеть английские имена, \nпоэтому написанные транслитом русские слова могут быть восприняты неправильно.\nНапример, в данном случае col (количество) легко спутать с сокращением от слова column."
      },
      "bigrams_list": {
        "type": "naming",
        "replace": "bigrams",
        "description": "В C# для составных имен принято использовать стиль CamelCase, и не использовать snake_case."
      }
    }
  },
  {
    "name": "manager",
    "instruction": "Продолжаем охоту на слова без смысла.",
    "code": "public interface {{IPriceManager}}\n{\n\tJson JsonFromXml(XmlDocument prices);\n\tXmlDocument XmlFromJson(Json prices);\n}",
    "bugs": {
      "IPriceManager": {
        "type": "naming",
        "replace": "IPriceFormatConverter",
        "description": "Manager — слово заместитель, не добавляющее смысла. Часто его можно заменить на что-то более осмысленное.\nНапример, менеджер по продажам может стать продавцом консультантом."
      }
    }
  },
  {
    "name": "CopyChars",
    "instruction": "Проблемы с именами в этом коде очевидны. Но тут есть кое-что еще!",
    "code": "void CopyChars(char[] {{array1}}, char[] {{array2}})\n{\n\t{{//copy arrays item by item.\n\t}}for(var i = 0; i < {{array1}}.Length; i++)\n\t\t{{array2}}[i] = {{array1}}[i];\n}",
    "bugs": {
      "array1": {
        "replace": "source",
        "type": "naming",
        "description": "Имена с номерами на конце — это антипаттерн.\nВместо добавления номеров старайтесь отразить в именах суть различия."
      },
      "array2": {
        "replace": "destination",
        "type": "naming",
        "description": "Функцию с непонятными именами аргументов неудобно использовать."
      },
      "//copy": {
        "replace": "",
        "type": "comments",
        "description": "Нет смысла писать комментарии, повторяющие код."
      }
    }
  },
  {
    "name": "Chessboard",
    "instruction": "Время закрепить все полученные на предыдущих уровнях знания!",
    "code": "enum {{ColorCell}}\n{ \n\tBlack, \n\tWhite\n}\n\nclass Chessboard \n{\n\tprivate {{ColorCell}}[,] {{array}};\n\tprivate int {{m_brdSz}};\n\n\tpublic Chessboard(int {{n}}) \n\t{\n\t\tthis.{{m_brdSz}} = {{n}};\n\t\tthis.{{array}} = new {{ColorCell}}[{{m_brdSz}},{{m_brdSz}}];\n\t\t{{//Fill board with black and white colors}}\n\t\tfor(var {{a}} = 0; {{a}} < {{m_brdSz}}; {{a}}++)\n\t\t\tfor(var {{b}} = 0; {{b}} < {{m_brdSz}}; {{b}}++) \n\t\t\t{\n\t\t\t\tbool isBlack = ({{a}} + {{b}}) % 2 == 0;\n\t\t\t\t{{array}}[{{a}}, {{b}}] = isBlack ? {{ColorCell}}.Black : {{ColorCell}}.White;\n\t\t\t}\n\t}\n}\n",
    "bugs": {
      "//Fill": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии повторяющие код не имеют смысла."
      },
      "ColorCell": {
        "type": "naming",
        "replace": "CellColor",
        "description": "Нарушение правильного для английского языка порядка слов в составных именах — частая ошибка программистов \nсо слабым знанием английского.\nColorCell — это цветная клетка, а цвет клетки — CellColor.\nНе путайте — не вводите в замешательство читающих."
      },
      "n": {
        "type": "naming",
        "replace": "size",
        "description": "В данном контексте, n может обозначать как размер шахматной доски, так и количество фигур на доске или номер доски.\nИмя size устранит эту неоднозначность."
      },
      "m_brdSz": {
        "type": "naming",
        "replace": "size",
        "description": "Не используйте закодированные или труднопроизносимые имена. Вам их придется произносить или хотя бы мысленно проговаривать!"
      },
      "array": {
        "type": "naming",
        "replace": "cellColors",
        "description": "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
      },
      "a": {
        "type": "naming",
        "replace": "y",
        "description": "Для обозначения координат вместо i, j и a, b лучше использовать предсказуемые и понятные x, y. "
      },
      "b": {
        "type": "naming",
        "replace": "x",
        "description": "Избегайте необходимости мысленного декодирования при чтении кода."
      }
    }
  },
  {
    "name": "SplitMethod",
    "instruction": "Имена переменных и методов тут в порядке. Но не только это делает код хорошим!",
    "code": "void Main(string[] args)\n{\n\tstring[] inputLines = File.ReadAllLines(args[0]);\n\tstring outputPath = args[1];\n\tif (Directory.Exists(outputPath))\n\t\toutputPath = Path.Combine(outputPath, Path.GetFileName(args[0]));\n\t{{\n\t//Convert file}}\n\tvar escapedLines = inputLines.Select(s => s.Replace(@\"\", @\"\\\"));\n\tvar outputText = string.Join(\"\\n\", escapedLines);\n\tFile.WriteAllText(outputPath, outputText);\n\tConsole.WriteLine(\"{0} characters\", outputText.Length);\n}",
    "bugs": {
      "//Convert": {
        "type": "methods",
        "replace": "ConvertFile(inputLines, outputPath);\n}\n\nvoid ConvertFile(IEnumerable<string> inputLines, string outputPath)\n{",
        "description": "Вместо комментария, разделяющего код на две фазы, стоит сделать настоящее разделение кода на методы.\nКаждый метод должен делать ровно одну вещь. Если вы можете естественным образом разбить один метод на два — сделайте это!\n"
      }
    }
  },
  {
    "name": "CommentExplainCode",
    "instruction": "Крохотные методы в одну-две строки часто могут значительно повысить читаемость кода.",
    "code": "{{//If employee deserves full benefits}}\nif ({{employee.IsHourly() && employee.Age > 65 || employee.HasSpecialReward}}))\n\tPay(employee, fullBenefitsAmount); {{//Pay largeAmount}}\nelse\n\tPay(employee, reducedAmount);",
    "bugs": {
      "//Pay": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии повторяющие код не нужны. Они легко могут устареть!"
      },
      "employee.IsHourly()": {
        "type": "methods",
        "replace": "employee.DeservesFullBenefits()",
        "description": "Сложные булевы выражения стоит выделять в методы или вспомогательные переменные, давая им говорящие названия. Это улучшит читаемость."
      },
      "//If": {
        "type": "comments",
        "replace": "",
        "description": "Вместо поясняющего комментария лучше изменить код так, чтобы в комментарии не было нужды."
      }
    }
  },
  {
    "name": "endComments",
    "instruction": "Как вы уже поняли, далеко не все комментарии полезны!",
    "code": "void Main(string[] args)\n{\n\ttry\n\t{\n\t\tvar linesCount = 0;\n\t\tvar charsCount = 0;\n\t\tvar lines = File.ReadAllLines(args[0]);\n\t\tforeach(var line in lines)\n\t\t{\n\t\t\tlinesCount++;\n\t\t\tcharsCount += line.Length;\n\t\t} {{//foreach}}\n\t\tConsole.WriteLine(\"linesCount = \" + linesCount);\n\t\tConsole.WriteLine(\"charsCount = \" + charsCount);\n\t} {{//try}}\n\tcatch (Exception e)\n\t{\n\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t} {{//catch}}\n}",
    "bugs": {
      "//foreach": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии вида 'конец цикла', 'конец функции' и подобные бессмысленны. "
      },
      "//try": {
        "type": "comments",
        "replace": "",
        "description": "Для коротких функций такие комментарии не нужны, а длинные функции лучше разбить на несколько более коротких."
      },
      "//catch": {
        "type": "comments",
        "replace": "",
        "description": "Современные среды разработки и программистские редакторы умеют подсвечивать парные скобки. Это надежнее таких комментариев."
      }
    }
  },
  {
    "name": "collision",
    "instruction": "Время закрепить освоенные знания!",
    "code": "{{///<summary>Обрабатывает столкновение героя с врагом</summary>}}\nvoid {{CollisionHandler}}(GameObject hero, GameObject enemy)\n{\n\t{{//If hero and enemy collided\n\tif ((hero.X-enemy.X)*(hero.X-enemy.X) + (hero.Y-enemy.Y)*(hero.Y-enemy.Y) \n\t\t< (hero.Radius + enemy.Radius)*(hero.Radius + enemy.Radius))}}\n\t{\n\t\thero.Life--;\n\t\tif (!hero.IsAlive && OnHeroDeath != null) {{//нужно оповестить подписчиков}}\n\t\t\tOnHeroDeath(hero);\n\t}\n}",
    "bugs": {
      "///<summary>Обрабатывает": {
        "type": "comments",
        "replace": "",
        "description": "XML-комментарии бессмысленны, если не несут новую информацию."
      },
      "CollisionHandler": {
        "type": "methods",
        "replace": "HandleCollision",
        "description": "Методы — это действия, называйте их глаголами или глагольными фразами."
      },
      "//If": {
        "type": "comments",
        "replace": "if (Collided(hero, enemy))",
        "description": "Не используйте комментарии там, где можно выделить метод с говорящим именем."
      },
      "//нужно": {
        "type": "comments",
        "replace": "",
        "description": "Комментарии дословно повторяющие код бессмысленны."
      }
    }
  }
]
